# This file is a template, and might need editing before it works on your project.
# This is a sample GitLab CI/CD configuration file that should run without any modifications.
# It demonstrates a basic 3 stage CI/CD pipeline. Instead of real tests or scripts,
# it uses echo commands to simulate the pipeline execution.
#
# A pipeline is composed of independent jobs that run scripts, grouped into stages.
# Stages run in sequential order, but jobs within stages run in parallel.
#
# For more information, see: https://docs.gitlab.com/ee/ci/yaml/index.html#stages
#
# You can copy and paste this template into a new `.gitlab-ci.yml` file.
# You should not add this template to an existing `.gitlab-ci.yml` file by using the `include:` keyword.
#
# To contribute improvements to CI/CD templates, please follow the Development guide at:
# https://docs.gitlab.com/ee/development/cicd/templates.html
# This specific template is located at:
# https://gitlab.com/gitlab-org/gitlab/-/blob/master/lib/gitlab/ci/templates/Getting-Started.gitlab-ci.yml

stages:          # List of stages for jobs, and their order of execution
  - build
  - test
  - deploy

build-job:       # This job runs in the build stage, which runs first.
  stage: build
  image: docker:20
  services:
    - docker:dind
  before_script:
    - echo "Starting build stage"
    - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
  script:
    - echo "Compiling the code..."
    - echo "Compile complete."
    - echo "Nikva ne ga wyr[im ti kazwam"
    - docker build --pull -t "$CI_REGISTRY_IMAGE:AudioPlayer" .
  after_script:
    - docker push "$CI_REGISTRY_IMAGE:AudioPlayer"

variables:
  MAVEN_CLI_OPTS: "--batch-mode --errors --fail-at-end --show-version"

maven_unit_test:
  stage: test
  image: maven:3.8.4  # Specify the Maven Docker image
  script:
    - mvn $MAVEN_CLI_OPTS clean test -Dspring.profiles.active=unittest

maven_integration_test:
  stage: test
  image: maven:3.8.4  # Specify the Maven Docker image
  script:
    - mvn $MAVEN_CLI_OPTS clean verify -Pintegration-tests -Dspring.profiles.active=unittest

deploy-job:      # This job runs in the deploy stage.
  stage: deploy  # It only runs when *both* jobs in the test stage complete successfully.
  environment: production
  image: docker:20
  services:
    - docker:dind
  before_script:
    - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
  script:
    - echo "Deploying application..."
    - echo "eu.deltasource.Application successfully deployed. "
    - echo "Da si ebe drobo maj se rynna"
    - docker run -d -p 8080:80 "$CI_REGISTRY_IMAGE:AudioPlayer"
